import React, {useState} from 'react';
import Head from 'next/head';
import NextImage from 'next/image';
import {trpc} from '@/trpc/api';
import {ImageType} from '@/trpc/types';
import Modal from '@/components/Modal';
import Star from '@/components/Star';

const Gallery: React.FC = () => {
  const images = trpc.getImages.useQuery();
  const editImage = trpc.editImage.useMutation({
    onSuccess: () => images.refetch(),
    onError: () => images.refetch(),
  });
  const editRequest = trpc.editRequest.useMutation({
    onSuccess: () => images.refetch(),
    onError: () => images.refetch(),
  });

  const [editingImage, setEditingImage] = useState<ImageType | null>(null);
  const [modalOpen, setModalOpen] = useState(false);
  const [requestingEdit, setRequestingEdit] = useState<ImageType | null>(null);

  if (!images.data || images.data.length === 0) {
    return null;
  }

  const handleEdit = (image: ImageType) => {
    setEditingImage(image);
  };

  const handleCanvasClick = (e: React.MouseEvent<HTMLCanvasElement>) => {
    const canvas: HTMLCanvasElement | null = document.querySelector('#canvas');
    if (!canvas || !editingImage) return;
    const {x, y} = canvas.getBoundingClientRect();
    const mouseX = e.clientX - x;
    const mouseY = e.clientY - y;
    const ctx = canvas.getContext('2d');
    if (!ctx) return;
    ctx.fillStyle = 'white';
    ctx.fillRect(mouseX - 5, mouseY - 5, 10, 10);
  };

  const handleSave = async () => {
    if (!editingImage) return;
    const userEditCanvas: HTMLCanvasElement | null =
      document.querySelector('#canvas');
    if (!userEditCanvas) return;
    const image = new Image();

    const editedImage: HTMLCanvasElement = document.createElement('canvas');
    const editedImageContext = editedImage.getContext('2d');
    editedImage.height = 200;
    editedImage.width = 200;

    image.src = editingImage.dataUrl;
    image.onload = () => {
      editedImageContext!.drawImage(image, 0, 0, 200, 200);
      editedImageContext!.drawImage(userEditCanvas, 0, 0, 200, 200);

      const editingResult = editedImage.toDataURL('image/png');
      editImage.mutate({id: editingImage.id, dataUrl: editingResult});

      setEditingImage(null);
    };
  };

  const handleRequestEdit = (image: ImageType) => {
    setRequestingEdit(image);
    setModalOpen(true);
  };

  const handleModalClose = () => {
    setModalOpen(false);
  };

  const handleModalSave = (edit: string) => {
    if (requestingEdit) {
      editRequest.mutate({id: requestingEdit.id, edit});
    }
    handleModalClose();
  };

  return (
    <>
      <Head>
        <title>Try It On - Gallery</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <div className='flex flex-wrap min-h-screen'>
        {images.data.map((image) => (
          <div
            key={image.id}
            className='flex flex-col m-2 border-2 border-rose-400 relative'
          >
            {image.edit && <Star />}
            <div className='max-w-sm flex flex-col rounded-lg overflow-hidden shadow relative'>
              <NextImage
                src={image.dataUrl}
                alt='Fancy Robot'
                width={200}
                height={200}
              />
            </div>
            <div className='flex justify-between'>
              <button
                className='bg-blue-500 text-white px-4 py-2 rounded'
                onClick={() => handleEdit(image)}
              >
                Edit
              </button>
              <button
                className='bg-blue-500 text-white px-4 py-2 rounded'
                onClick={() => handleRequestEdit(image)}
              >
                Request Edit
              </button>
            </div>
          </div>
        ))}
        {editingImage && (
          <div className='fixed inset-0 z-50 flex items-center justify-center'>
            <div className='absolute inset-0 bg-black opacity-80' />
            <div className='relative'>
              <NextImage
                src={editingImage.dataUrl}
                alt='Editing Image'
                width={400}
                height={400}
              />
              <canvas
                id='canvas'
                className='absolute top-0 left-0 border-2 border-white'
                width='400'
                height='400'
                onClick={handleCanvasClick}
              />
              <div className='mt-4 flex justify-between'>
                <button
                  className='bg-blue-500 text-white px-4 py-2 rounded'
                  onClick={handleSave}
                >
                  Save
                </button>
                <button
                  className='bg-blue-500 text-white px-4 py-2 rounded'
                  onClick={() => setEditingImage(null)}
                >
                  Cancel
                </button>
              </div>
            </div>
          </div>
        )}
        {modalOpen && requestingEdit !== null && (
          <Modal
            onSave={handleModalSave}
            onClose={handleModalClose}
            image={requestingEdit}
          />
        )}
      </div>
    </>
  );
};
export default Gallery;
